{"version":3,"sources":["components/Home.js","components/Edit.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","style","textAlign","color","id","fontSize","padding","react_router_dom","to","marginTop","border","boxShadow","borderRadius","Component","Edit","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","divClicked","e","element","document","getElementById","target","hideCursor","cursor","toggleLayout","state","layout","setState","reset","i","concat","innerHTML","j","contentEditable","_this2","_this$props","memes","random","nextMeme","Hdivisions","meme","container","backgroundImage","url","height","backgroundSize","backgroundRepeat","display","flexDirection","btn","background","map","key","className","flex","onClick","App","Math","floor","length","fetch","then","res","json","data","_this3","_this$state","Fragment","react_router","exact","path","render","Home_Home","Edit_Edit","React","Boolean","window","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e1fed47.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\n\nexport default class Home extends Component {\n    render() {\n        const btnStyle = {\n            padding: '10px',\n            fontSize: '20px',\n            marginTop: '20px',\n            border: 'none',\n            boxShadow: '4px 4px 8px 1px darkmagenta',\n            borderRadius: '6px'\n        }\n        return (\n            <div style={{ textAlign: 'center', color: 'white'}} id='home'>\n                <div style={{ color: 'white', fontSize: '30px', padding: '5px'}}>Make memes using pre-made templates.</div>\n                <Link to='/edit'>\n                    <button style={btnStyle}>Let's start</button>\n                </Link>\n                <div>\n                    <ol>\n                        <li>Click anywhere on the pic to start editing.</li>\n                        <li>Click on the text to change color.</li>\n                        <li>Take screenshot of the edited template and it's done.</li>\n                    </ol>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Edit extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        layout: 'default'\n      }\n    }\n    \n    componentDidMount() {\n      document.getElementById('meme').contentEditable = true\n      document.getElementById('functions').contentEditable = false\n    }\n\n    divClicked = e => {\n      var element = document.getElementById(e.target.id)\n      var color = element.style.color\n      color === 'black' ? element.style.color = 'white' : element.style.color = 'black'\n    }\n\n    hideCursor = () => {\n        document.getElementById('meme').style.cursor = 'none'\n    }\n\n    toggleLayout = () => {\n        this.state.layout === 'default' ? this.setState({ layout: 'grid' }) : this.setState({ layout: 'default'})\n    }\n\n    reset = () => {\n        const layout = this.state.layout\n        if(layout === 'default') {\n            for(var i=1; i<=20; i++) {\n                document.getElementById(`div${i}`).innerHTML = ''\n            }\n        } else {\n            for(i=1; i<=20; i++) {\n                for(var j=1; j<=5; j++) {\n                    document.getElementById(`div${i}${j}`).innerHTML = ''\n                }\n            }\n        }\n    }\n\n    render() {\n        const Vdivisions = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n        const { layout } = this.state;\n        const { memes, random, nextMeme } = this.props;\n        const Hdivisions = layout === 'default' ? [1] : [1,2,3,4,5]\n        const meme = memes[random] || ''\n\n        const container = {\n          backgroundImage: `url(${meme.url})`,\n          height: '100vh',\n          backgroundSize: '100vw 95vh',\n          backgroundRepeat: 'no-repeat',\n          display: 'flex',\n          flexDirection: 'column'\n        }\n\n        const btn = {\n            border: '1px solid white',\n            height: '5vh',\n            color: 'white',\n            background: '#121212',\n        }\n\n        return (\n            <div style={container} id='meme'>\n              {\n                  Vdivisions.map(i => {\n                      return (\n                          <div key={i} className=\"text-div\" id={`div${i}`}>\n                            {\n                                Hdivisions.map(j => {\n                                    return <div style={{ flex: '2 2 0%'}} key={j} onClick={e => this.divClicked(e)} id={`div${i}${j}`}></div>\n                                })\n                            }\n                          </div>\n                      )\n                  })\n              }\n              <div id='functions'>\n                  <button style={btn} onClick={() => this.hideCursor()}>Hide cursor</button>\n                  <button style={btn} onClick={() => this.toggleLayout()}>\n                      {\n                          layout === 'default' ? 'default layout' : 'grid layout'\n                      }\n                  </button>\n                  <button style={btn} onClick={() => this.reset()}>reset</button>\n                  <button style={btn} onClick={() => nextMeme(this.reset)}>Next meme</button>\n              </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css'\nimport { Switch, Route } from 'react-router-dom'\nimport Home from './components/Home';\nimport Edit from './components/Edit';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      memes: [],\n      random: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://api.imgflip.com/get_memes')\n    .then(res => res.json())\n    .then(data => {\n      this.setState({\n        memes: data.data.memes,\n        random: Math.floor(Math.random() * (data.data.memes.length - 1)) + 1\n      })\n    })\n  }\n\n  nextMeme = (reset) => {\n    this.setState({\n      random: Math.floor(Math.random() * (this.state.memes.length - 1)) + 1\n    }, () => reset())\n  }\n  render() {\n    const { memes, random } = this.state;\n    return (\n      <>\n      <Switch>\n        <Route exact path='/' render={props => <Home />} />\n        <Route path='/edit' render={props => <Edit memes={memes} random={random} nextMeme={this.nextMeme}/>} />\n      </Switch>\n      </>\n    )\n  }\n}\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter } from 'react-router-dom'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}