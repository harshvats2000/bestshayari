{"version":3,"sources":["components/Home.js","components/Edit.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","style","textAlign","color","react_router_dom","to","padding","fontSize","marginTop","border","boxShadow","borderRadius","Component","Edit","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","divClicked","e","console","log","target","offsetTop","clientY","element","document","getElementById","id","paddingLeft","clientX","paddingTop","state","memes","_this2","contentEditable","fetch","then","res","json","data","setState","_this3","meme","Math","floor","random","length","container","backgroundImage","concat","url","height","backgroundSize","display","flexDirection","onClick","className","App","Fragment","react_router","exact","path","render","props","Home_Home","Edit_Edit","React","Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","ReactDOM","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff093474.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\n\nexport default class Home extends Component {\n    render() {\n        const btnStyle = {\n            padding: '10px',\n            fontSize: '20px',\n            marginTop: '20px',\n            border: 'none',\n            boxShadow: '4px 4px 8px 1px darkmagenta',\n            borderRadius: '6px'\n        }\n        return (\n            <div style={{ textAlign: 'center', color: 'white'}}>\n                <h1 style={{ color: 'white'}}>Make memes using pre-made templates.</h1>\n                <Link to='/edit'>\n                    <button style={btnStyle}>Let's start</button>\n                </Link>\n                <div>\n                    <ol>\n                        <li>Click anywhere on the pic to start editing.</li>\n                        <li>Click on the text to change color.</li>\n                        <li>Take screenshot of the edited template and it's done.</li>\n                    </ol>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Edit extends Component {\n    constructor() {\n      super()\n      this.state = {\n        memes: []\n      }\n    }\n    \n    componentDidMount() {\n      document.getElementById('meme').contentEditable = true\n      fetch('https://api.imgflip.com/get_memes')\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          memes: data.data.memes\n        })\n      })\n    }\n\n    divClicked = e => {\n      console.log(e.target.offsetTop);\n      console.log(e.clientY);\n      var element = document.getElementById(e.target.id)\n      element.style.paddingLeft = e.clientX + 'px'\n      element.style.paddingTop = e.clientY - e.target.offsetTop - 10 + 'px'\n      var color = element.style.color\n      color === 'black' ? element.style.color = 'white' : element.style.color = 'black'\n    }\n\n    render() {\n        const { memes } = this.state;\n        const random = Math.floor(Math.random() * (memes.length - 1)) + 1;\n        const meme = memes[random] || ''\n\n        const container = {\n          backgroundImage: `url(${meme.url})`,\n          height: '100vh',\n          backgroundSize: '100vw 100vh',\n          display: 'flex',\n          flexDirection: 'column'\n        }\n\n        return (\n            <div style={container} id='meme'>\n              <div onClick={e => this.divClicked(e)} id='div1' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div2' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div3' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div4' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div5' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div6' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div7' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div8' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div9' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div10' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div11' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div12' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div13' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div14' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div15' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div16' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div17' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div18' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div19' className='text-div'></div>\n              <div onClick={e => this.divClicked(e)} id='div20' className='text-div'></div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css'\nimport { Switch, Route } from 'react-router-dom'\nimport Home from './components/Home';\nimport Edit from './components/Edit';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n      <Switch>\n        <Route exact path='/' render={props => <Home />} />\n        <Route path='/edit' render={props => <Edit />} />\n      </Switch>\n      </>\n    )\n  }\n}\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter } from 'react-router-dom'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase/app'\nimport 'firebase/analytics'\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyCEMfOB5_j1hIdpxVXOduBuUMTwj5txVZo\",\n    authDomain: \"bestshayari-7f672.firebaseapp.com\",\n    databaseURL: \"https://bestshayari-7f672.firebaseio.com\",\n    projectId: \"bestshayari-7f672\",\n    storageBucket: \"bestshayari-7f672.appspot.com\",\n    messagingSenderId: \"1001640034721\",\n    appId: \"1:1001640034721:web:251a9065628579fe518be0\",\n    measurementId: \"G-EQP9800NT3\"\n};\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}